// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	url "net/url"
	reflect "reflect"

	am "github.com/ringsaturn/am"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessTokenSaver is a mock of AccessTokenSaver interface.
type MockAccessTokenSaver struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenSaverMockRecorder
}

// MockAccessTokenSaverMockRecorder is the mock recorder for MockAccessTokenSaver.
type MockAccessTokenSaverMockRecorder struct {
	mock *MockAccessTokenSaver
}

// NewMockAccessTokenSaver creates a new mock instance.
func NewMockAccessTokenSaver(ctrl *gomock.Controller) *MockAccessTokenSaver {
	mock := &MockAccessTokenSaver{ctrl: ctrl}
	mock.recorder = &MockAccessTokenSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenSaver) EXPECT() *MockAccessTokenSaverMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockAccessTokenSaver) GetAccessToken(arg0 context.Context) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockAccessTokenSaverMockRecorder) GetAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockAccessTokenSaver)(nil).GetAccessToken), arg0)
}

// SetAccessToken mocks base method.
func (m *MockAccessTokenSaver) SetAccessToken(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockAccessTokenSaverMockRecorder) SetAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockAccessTokenSaver)(nil).SetAccessToken), arg0, arg1, arg2)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Directions mocks base method.
func (m *MockClient) Directions(arg0 context.Context, arg1 *am.DirectionsRequest) (*am.DirectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Directions", arg0, arg1)
	ret0, _ := ret[0].(*am.DirectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Directions indicates an expected call of Directions.
func (mr *MockClientMockRecorder) Directions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Directions", reflect.TypeOf((*MockClient)(nil).Directions), arg0, arg1)
}

// Eta mocks base method.
func (m *MockClient) Eta(arg0 context.Context, arg1 *am.EtaRequest) (*am.EtaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eta", arg0, arg1)
	ret0, _ := ret[0].(*am.EtaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eta indicates an expected call of Eta.
func (mr *MockClientMockRecorder) Eta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eta", reflect.TypeOf((*MockClient)(nil).Eta), arg0, arg1)
}

// Geocode mocks base method.
func (m *MockClient) Geocode(arg0 context.Context, arg1 *am.GeocodeRequest) (*am.PlaceResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Geocode", arg0, arg1)
	ret0, _ := ret[0].(*am.PlaceResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Geocode indicates an expected call of Geocode.
func (mr *MockClientMockRecorder) Geocode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Geocode", reflect.TypeOf((*MockClient)(nil).Geocode), arg0, arg1)
}

// GetAccessToken mocks base method.
func (m *MockClient) GetAccessToken(arg0 context.Context) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockClientMockRecorder) GetAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockClient)(nil).GetAccessToken), arg0)
}

// GetNewAccessToken mocks base method.
func (m *MockClient) GetNewAccessToken(arg0 context.Context) (*am.AccessTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewAccessToken", arg0)
	ret0, _ := ret[0].(*am.AccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAccessToken indicates an expected call of GetNewAccessToken.
func (mr *MockClientMockRecorder) GetNewAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAccessToken", reflect.TypeOf((*MockClient)(nil).GetNewAccessToken), arg0)
}

// ReverseGeocode mocks base method.
func (m *MockClient) ReverseGeocode(arg0 context.Context, arg1 *am.ReverseRequest) (*am.PlaceResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseGeocode", arg0, arg1)
	ret0, _ := ret[0].(*am.PlaceResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseGeocode indicates an expected call of ReverseGeocode.
func (mr *MockClientMockRecorder) ReverseGeocode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseGeocode", reflect.TypeOf((*MockClient)(nil).ReverseGeocode), arg0, arg1)
}

// Search mocks base method.
func (m *MockClient) Search(arg0 context.Context, arg1 *am.SearchRequest) (*am.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].(*am.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockClientMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClient)(nil).Search), arg0, arg1)
}

// SearchAutoComplete mocks base method.
func (m *MockClient) SearchAutoComplete(arg0 context.Context, arg1 *am.SearchAutoCompleteRequest) (*am.SearchAutocompleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAutoComplete", arg0, arg1)
	ret0, _ := ret[0].(*am.SearchAutocompleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAutoComplete indicates an expected call of SearchAutoComplete.
func (mr *MockClientMockRecorder) SearchAutoComplete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAutoComplete", reflect.TypeOf((*MockClient)(nil).SearchAutoComplete), arg0, arg1)
}

// SetAccessToken mocks base method.
func (m *MockClient) SetAccessToken(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockClientMockRecorder) SetAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockClient)(nil).SetAccessToken), arg0, arg1, arg2)
}

// Mockquery is a mock of query interface.
type Mockquery struct {
	ctrl     *gomock.Controller
	recorder *MockqueryMockRecorder
}

// MockqueryMockRecorder is the mock recorder for Mockquery.
type MockqueryMockRecorder struct {
	mock *Mockquery
}

// NewMockquery creates a new mock instance.
func NewMockquery(ctrl *gomock.Controller) *Mockquery {
	mock := &Mockquery{ctrl: ctrl}
	mock.recorder = &MockqueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockquery) EXPECT() *MockqueryMockRecorder {
	return m.recorder
}

// URLValues mocks base method.
func (m *Mockquery) URLValues() (url.Values, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLValues")
	ret0, _ := ret[0].(url.Values)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLValues indicates an expected call of URLValues.
func (mr *MockqueryMockRecorder) URLValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLValues", reflect.TypeOf((*Mockquery)(nil).URLValues))
}
